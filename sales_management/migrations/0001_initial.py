# Generated by Django 4.2 on 2025-05-07 10:14

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('inventory_management', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('dimensions', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('customer_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(max_length=50)),
                ('address', models.TextField()),
                ('customer_type', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'customers',
            },
        ),
        migrations.CreateModel(
            name='Sale',
            fields=[
                ('sale_id', models.AutoField(primary_key=True, serialize=False)),
                ('sale_date', models.DateField()),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('status', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sales_management.customer')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dimensions.storedim')),
            ],
            options={
                'db_table': 'sales',
            },
        ),
        migrations.CreateModel(
            name='SaleItem',
            fields=[
                ('sale_item_id', models.AutoField(primary_key=True, serialize=False)),
                ('quantity', models.IntegerField()),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('discount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory_management.item')),
                ('sale', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sales_management.sale')),
            ],
            options={
                'db_table': 'sale_items',
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('report_id', models.AutoField(primary_key=True, serialize=False)),
                ('report_type', models.CharField(choices=[('SALES', 'Sales Report'), ('INVENTORY', 'Inventory Report'), ('PROCUREMENT', 'Procurement Report'), ('CUSTOMER', 'Customer Report'), ('FINANCIAL', 'Financial Report')], max_length=100)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('parameters', models.JSONField()),
                ('result_data', models.JSONField()),
                ('file_path', models.CharField(blank=True, max_length=512, null=True)),
                ('is_scheduled', models.BooleanField(default=False)),
                ('schedule_frequency', models.CharField(blank=True, max_length=50, null=True)),
                ('generated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'reports',
            },
        ),
        migrations.CreateModel(
            name='PriceHistory',
            fields=[
                ('price_id', models.AutoField(primary_key=True, serialize=False)),
                ('price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('effective_from', models.DateField()),
                ('effective_to', models.DateField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reason', models.TextField(blank=True, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory_management.item')),
            ],
            options={
                'db_table': 'price_history',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('payment_id', models.AutoField(primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('payment_date', models.DateTimeField(auto_now_add=True)),
                ('payment_method', models.CharField(choices=[('CASH', 'Cash'), ('CREDIT_CARD', 'Credit Card'), ('DEBIT_CARD', 'Debit Card'), ('BANK_TRANSFER', 'Bank Transfer'), ('MOBILE_PAYMENT', 'Mobile Payment')], max_length=100)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('REFUNDED', 'Refunded')], max_length=100)),
                ('reference_number', models.CharField(max_length=255, unique=True)),
                ('transaction_details', models.JSONField(blank=True, null=True)),
                ('sale', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sales_management.sale')),
            ],
            options={
                'db_table': 'payments',
            },
        ),
        migrations.AddIndex(
            model_name='report',
            index=models.Index(fields=['report_type', 'generated_at'], name='reports_report__bb4969_idx'),
        ),
        migrations.AddIndex(
            model_name='pricehistory',
            index=models.Index(fields=['item', 'effective_from', 'effective_to'], name='price_histo_item_id_e95cee_idx'),
        ),
    ]
